ERD 생성

create table student (
std_num varchar(10),
std_name varchar(20) not null,
std_major varchar(20),
std_term int,
std_point int,
primary key(std_num));


create table course (
co_code varchar(11),
co_name varchar(20) not null,
co_professor varchar(20),
co_point int default 3,
co_time int,
co_timetable varchar(40),
primary key(co_code));


create table attend(
at_num int auto_increment,
at_std_num varchar(10),
at_co_code varchar(11),
at_year int,
at_term int,
at_mid int default 0,
at_final int default 0,
at_attend int default 0,
at_hw int default 0,
at_repetition varchar(1) default 'n',
at_score varchar(4),
primary key(at_num),
foreign key(at_co_code) references course(co_code),
foreign key(at_std_num) references student(std_num));

insert내용은 카페에

(테이블 생성 후 alter로 add 방법)
alter table attend add foreign key(at_std_num) references student(std_num);
alter table attend add foreign key(at_co_code) references course(co_code);



----------------------------------------------------------------
at_year을 2023년으로 업데이트
update attend set at_year = 2023;

at_term은 at_num 1~8까지는 1, 9~16까지는 2
update attend set at_term = if(at_num between 1 and 8, 1, 2);
					(if(at_num <=8,1,2));


at_mid : 40 / at_final : 40 / at_hw : 10 / at_attend : 10
1학기 친구들만 해당 값 채우기

update attend set at_mid =38, at_final = 35, at_hw= 8, at_attend =7 where at_num=1;
update attend set at_mid =39, at_final = 32, at_hw= 7, at_attend =6 where at_num=2;
update attend set at_mid =25, at_final = 31, at_hw= 6, at_attend =5 where at_num=3;
update attend set at_mid =15, at_final = 28, at_hw= 5, at_attend =4 where at_num=4;
update attend set at_mid =18, at_final = 27, at_hw= 4, at_attend =3 where at_num=5;
update attend set at_mid =25, at_final = 25, at_hw= 3, at_attend =2 where at_num=6;
update attend set at_mid =34, at_final = 24, at_hw= 9, at_attend =1 where at_num=7;
update attend set at_mid =40, at_final = 22, at_hw= 1, at_attend =9 where at_num=8;

-----------------------------------------------------------------------------------------------------

- at_score 채우기 1학기만 채우기
at_mid+at_final+at_attend+at_hw >=90 'A'

update attend set at_score =
case
when at_mid+at_final+at_attend+at_hw >= 90 then 'A'
when at_mid+at_final+at_attend+at_hw >= 80 then 'B'
when at_mid+at_final+at_attend+at_hw >= 70 then 'C'
when at_mid+at_final+at_attend+at_hw >= 60 then 'D'
else 'F' end where at_num between 1 and 8;


- at_repetiton 재수강여부 채우기 1학기만 채우기 at_score가 F이거나, at_attend가 3이하면 y

update attend set at_repetition =
case 
when at_score = 'F' then 'y' 
when at_attend <=3 then 'y' 
else 'n'
end where at_num between 1 and 8;

update attend set at_repetition = 'n';

update attend set at_repetition = 
if(at_score='F' or at_attend <=3, 'y', 'n')
where at_term =1;


- score별 인원수 집계
select at_score as '성적', count(at_score) as '인원수' from attend where at_term =1 group by at_score order by at_score;

select at_score as '성적', count(at_score) as '인원수' from attend group by at_score having at_score is not null order by at_score;

- 재수강 인원집계
select at_repetition as '재수강' , count(if(at_repetition='y',1,null)) as '인원' from attend where at_repetition = 'y' group by at_repetition;

select at_repetition, count(at_repetition) from attend group by at_repetition having at_repetition = 'y';




join
- 여러 개의 테이블을 묶어 하나의 테이블로 만들어 사용하는 것
- 원하는 데이터가 다른 테이블에 흩어져 있을 때 join을 사용
- 내부조인(inner join), 외부조인(outer join)
- select 열목록 from 테이블명
- (inner) join 참조 테이블명
- on 조인 조건 (fk연결)
- (where 조건)
- group by / having
- (order by)

select at_std_num, std_name from attend a (inner) join student s on a. at_std_num = s.std_num where a.at_score='A';

-inner join을 활용하여 재수강자 이름을 출력

select std_name from student s
join attend a on s.std_num = a.at_std_num
where a.at_repetition = 'y';


select * from student s 
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code 
order by a.at_num;


- at_score가 A인 학생의 명단을 출력
학번, 이름, 학점
(join student, attend)
select  std_num, std_name, at_score from student s 
join attend a on s.std_num = a.at_std_num
where a.at_score='B';
order by a.at_num;


-at_repetition이 y인 학생의 명단 출력
학번, 이름, 재수강여부
(join student, attend)
select std_num, std_name, at_repetition from student s
join attend a on s.std_num = a.at_std_num
where a.at_repetition = 'y'



select *from student s 
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code 
order by a.at_num;

---------------------------------------------------------------
과제
F를 받은 학생들의 명단 (학번, 이름, 학과)
(join student, attend)
select std_num, std_name, std_major from student s
join attend a on std_num = at_std_num
where at_score = 'F';

+------------+----------+-----------+
| std_num    | std_name | std_major |
+------------+----------+-----------+
| 2019456001 | 강길동   | 디자인    |
| 2020123001 | 강나래   | 화학공학  |
| 2020123020 | 박철수   | 화학공학  |
+------------+----------+-----------+
3 rows in set (0.00 sec)

- A학점을 받은 학생들의 (학번, 이름, 과목) //A학점 학생 존재 X B학점으로 변경
(join attend, student, course)
select std_num, std_name, co_name from student s
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where at_score='B';

+------------+----------+--------------+
| std_num    | std_name | co_name      |
+------------+----------+--------------+
| 2020160001 | 강철수   | 대학수학기초 |
| 2020160002 | 나영희   | 대학수학기초 |
+------------+----------+--------------+

-A학점 학생들의 (학번, 이름, 과목, 성적) 성적: mid+final+attend+hw as '성적;//A학점 학생 존재 X B학점으로 변경

select std_num, std_name, co_name, (at_mid+at_final+at_attend+at_hw) as'성적' from student s
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where a.at_score='B';

+------------+----------+--------------+------+
| std_num    | std_name | co_name      | 성적 |
+------------+----------+--------------+------+
| 2020160001 | 강철수   | 대학수학기초 |   88 |
| 2020160002 | 나영희   | 대학수학기초 |   84 |
+------------+----------+--------------+------+

- 과목별(co_name)중간, 기말, 출석, 과제 합계 (과목별로 오름차순)
select co_name, sum(at_mid),sum(at_final),sum(at_attend), sum(at_hw) from attend a
join course c on c.co_code = a.at_co_code
group by c.co_code
order by c.co_name;

+----------------+-------------+---------------+----------------+------------+
| co_name        | sum(at_mid) | sum(at_final) | sum(at_attend) | sum(at_hw) |
+----------------+-------------+---------------+----------------+------------+
| 기초전기       |          74 |            46 |             10 |         10 |
| 대학수학기초   |          77 |            67 |             13 |         15 |
| 컴퓨터개론     |          43 |            52 |              5 |          7 |
| 프로그래밍일반 |          40 |            59 |              9 |         11 |
+----------------+-------------+---------------+----------------+------------+
4 rows in set (0.00 sec)

- 학점별 중간, 기말, 출석, 과제 평균 (null은 제외, 학점별 오름차순)

select at_score, round(avg(at_mid),1),round(avg(at_final),1),round(avg(at_attend),1), round(avg(at_hw),1) from attend
group by at_score
having at_score is not null
order by at_score;

+----------+--------------------+----------------------+-----------------------+-------------------+
| at_score | floor(avg(at_mid)) | floor(avg(at_final)) | floor(avg(at_attend)) | floor(avg(at_hw)) |
+----------+--------------------+----------------------+-----------------------+-------------------+
| B        |                 38 |                   33 |                     6 |                 7 |
| C        |                 40 |                   22 |                     9 |                 1 |
| D        |                 29 |                   27 |                     3 |                 7 |
| F        |                 19 |                   26 |                     3 |                 4 |
+----------+--------------------+----------------------+-----------------------+-------------------+
4 rows in set (0.00 sec)


- 강철수가 수강하고 있는 과목들의 이름, 교수명 출력

select std_name, co_name, co_professor from student s 
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where s.std_name = '강철수';

+----------+----------------+--------------+
| std_name | co_name        | co_professor |
+----------+----------------+--------------+
| 강철수   | 대학수학기초   | 홍길동       |
| 강철수   | 프로그래밍일반 | 임꺽정       |
+----------+----------------+--------------+
2 rows in set (0.00 sec)




-------------------------------------------------------------------------
1. 학번이 2020으로 시작하는 학생들의 학번, 이름, 학과 출력
select std_num, std_name, std_major from student
where std_num like'2020%';


2. 프로그래밍 일반 과목을 듣는 학생 명단 출력 학번, 이름, 학과
select std_num, std_name, std_major from student s
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where c.co_name = '프로그래밍일반';


3. 홍길동 교수가 강의하는 과목을 듣는 학생 명단 학번, 이름, 학과, 수강과목, 담당교수
select std_num, std_name, std_major, co_name,co_professor from student s 
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where c.co_professor = '홍길동';


4. 전봉준이 획득한 학점(co_point) 합계-> 2학기 미포함, 미이수학점 제외
select std_name,sum(co_point) from student s
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where s.std_name = '전봉준' and a.at_repetition ='n'and a.at_term = 1;

select std_name,sum(co_point) from student s
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where at_term =1 and at_repetition = 'n'
group by std_name
having std_name = '전봉준';


5. 재수강자 점수(중간+기말+출석+과제) 합계 학번, 이름 , 학과, 과목, 점수합계
select std_num, std_name, std_major, co_name, (at_mid+at_final+at_attend+at_hw) from student s 
join attend a on s.std_num = a.at_std_num
join course c on c.co_code = a.at_co_code
where at_repetition = 'y';

----------------------------------------------------------------------------------------------------------

insert into student values 
('2020160003','김순이','컴퓨터공학',1,25),
('2020160004','홍순길','디자인',1,20);


student학생을 추가하고, 조인 후 수강하고있지 않는 학생의 명단 출력
-> student 테이블에는 있지만, attend테이블에는 없는 자료를 추출
-> left join : 두 테이블이 일치하지 않아도 모든 내용 출력 
(앞쪽 데이터 기준, 뒤쪽 데이터는 X inner와 다르게 순서가 중요)
(inner join : 두 테이블에 일치하는 데이터만 출력)

select s.* from student s
left join attend a
on s.std_num = a.at_std_num
where a.at_num is null;






















































