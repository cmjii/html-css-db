1. at_mid, at_final, at_attend, at_hw 값 업데이트
	40, 40, 10, 10

update attend set at_mid =38, at_final = 40, at_hw= 10, at_attend =7 where at_num in (55,56,57,58,59);
update attend set at_mid =39, at_final = 32, at_hw= 7, at_attend =6 where at_num in (63,64,65,66);
update attend set at_mid =25, at_final = 31, at_hw= 6, at_attend =5 where at_num in (71,72,73);
update attend set at_mid =15, at_final = 28, at_hw= 5, at_attend =4 where at_num in (76,77,78);
update attend set at_mid =18, at_final = 27, at_hw= 4, at_attend =3 where at_num in (79,80,81);
update attend set at_mid =25, at_final = 25, at_hw= 3, at_attend =2 where at_num in (60,61,62);
update attend set at_mid =34, at_final = 24, at_hw= 9, at_attend =1 where at_num in (67,68,69,70);
update attend set at_mid =40, at_final = 22, at_hw= 1, at_attend =9 where at_num in (74,75);

2. 합계값을 이용하여 at_score 업데이트
합계 > = 90 A >=80B >=70 C >=D/ F
at_mid + at_final + at_attend + at_hw

update attend set at_score =
case
when at_mid+at_final+at_attend+at_hw >= 90 then 'A'
when at_mid+at_final+at_attend+at_hw >= 80 then 'B'
when at_mid+at_final+at_attend+at_hw >= 70 then 'C'
when at_mid+at_final+at_attend+at_hw >= 60 then 'D'
else 'F' end;


3. at_pass (p/f) : at_score가 A또는 B면 p(pass) / 아니면 f(fail)

update attend set at_pass =
case
when at_score = 'A' or at_score = 'B' then 'p'
else 'f' end;

update attend set at_pass = (
if(at_score = 'A' or at_score = 'B','p','f'));

4. at_pass의 default 값을 f로 변경

alter table attend alter column at_pass set default 'f';

alter table attend modify at_pass varchar(1) default 'f';

5. at_repetition 값 업데이트(y/n)
at_score가 F이거나 at_attend가 3이하인 값은 y 아니면 n

update attend set at_repetition =
case
when at_score = 'F' or at_attend <=3 then 'y'
else 'n' end;

update attend set at_repetition = (
if(at_score = 'F' or at_attend <= 3, 'y', 'n'));




----------------------------------------------------------------


1. 김영철 수강과목 (학기) 출력
대학수학(1) -> 출력 / 과목(학기)

select su_title, co_term from course
join subject on su_num = co_su_num
join attend on at_co_num = co_num
join student on at_st_num = at_num
where st_name = '김영철';


select concat(su_title,'(',co_term,')') as ' 수강과목' from attend
join student on at_st_num = st_num
join course on at_co_num = co_num
join subject on co_su_num = su_num
where st_name = '김영철';



------------------------------------------------------

index 인덱스

- 테이블에 조회 속도를 높여주는 자료구조
- 조회 속도는 빨라지지만 update, insert, delete 속도는 저하된다는 단점
- 인덱스는 mysql index파일에 저장
- 인덱스는 하나 또는 여러 개 칼럼에 대해 설정이 가능
- 여러 칼럼을 묶어 하나의 인덱스로도 설정 가능
- 인덱스는 where절 뒤에서 사용할 때만 성능에 영향을 끼침
- order by, group by에 대한 index도 영향을 미침



index를 타지 않는 경우

- 복수의 키에 대해 order by 하는 경우
- 연속하지 않는 칼럼에 대해 order by를 실행한 경우
- group by와 order by의 칼럼이 다를 경우
- order by 칼럼을 변형시켜 사용할 경우
- 다중 칼럼 인덱스는 단일 칼럼 인덱스보다 더 비효율적(insert, update, delete)이므로     
  다중 칼럼 인덱스는 더욱 더 신중하게 설정 해야함


index 설정 – 테이블 생성

- create table 테이블명 
( 칼럼 1 속성, 칼럼 2 속성…
 primary key(칼럼),
 key 인덱스명(칼럼), key 인덱스명 (칼럼)); 

/ 다중 칼럼 인덱스 -> key 인덱스명(칼럼,칼럼)


ex) (예시 인덱스명 = idx_name)
create table table (
id int not null,
name varchar(10),
address varchar(20),
primary key(id),
key idx_name(name));


index 생성 – 기존 테이블에 추가 (예시 인덱스명 = idx_name)

- 인덱스 생성
  create index idx_name on 테이블명 (칼럼명);

- 테이블에 추가
  alter table 테이블명 add index idx_name(칼럼명);

-인덱스 보기
  show index from 테이블명

- 인덱스 삭제
  alter table 테이블명 drop index idx_name;


------------------------------------------------------

student 테이블에 st_name 인덱스 추가
alter table student add index idx_st_name(st_name);

삭제
alter table student drop index idx_st_name;

--------------------------------------------------------

view 생성 

- 데이터베이스에서 존재하는 가상 테이블
- 자주 조회하는 테이블의 값을 별도로 저장하는 기능
- 실제 데이터를 저장하고 있지 않음 ( 물리적으로 존재하지 않는다 )
- 보여주기만 가능 (insert, update, delete 불가능)
- 뷰는 index를 가질 수 없다



view 생성 구문 

- 단일(단순)뷰
- create view view_name as
- select 칼럼명 from 테이블명
- where 조건;

ex) 주소가 서울인 학생의 이름만 뷰로 생성
create view seoul_view as
select name from student
where address = ‘seoul’;

- 복합(여러 개의 테이블)뷰
- join 가능 (단일뷰 사용불가)
- 그룹함수 가능 (단일뷰 사용불가)
- distinct 가능 (단일뷰 사용불가)


view 생성 

- 여러 테이블에서 필드를 조회하는 뷰도 가능

create view view_name as 
select a.칼럼, b.칼럼
from table_a a, table_b b
where 조건;


view 대체 명령어 

- 뷰는 한 번 생성하면 변경이 불가능하기 때문에 새로운 뷰로 대체할 수 있음.
- replace 명령어 사용 => create 대신 replace 사용
- create or replace view_name as
  select 칼럼 ad ‘칼럼명‘
  from 테이블명;


view 명령어

-뷰 조회 select * from view_name;

-뷰 삭제 drop view view_name;

-테이블 보기 show full tables;

-상세보기 show full tables;

-----------------------------------------------------

view생성
1학기 수업을 듣는 학생을 검색 1_term_view
학번, 이름 조건 : 1학기 수강자
중복제거 

create view 1_term_view as
select s.st_name, s.st_num
from student s, course c
where c.co_term=1;

--기존 뷰 수정 (삭제 후 재생성)
create or replace view 1_term_join_view as
select distinct s.st_num, s.st_name
from student s
join attend a on a.at_st_num = s.st_num
join course c on a.at_co_num = c.co_num
where c.co_term = 1;

------------------------------------------------------

school db에서 view 생성

1. 컴퓨터공학과 뷰 생성
create view com_view as
select * from student
where std_major = '컴퓨터공학';

2. 학번, 이름, 학과
create or replace view com_view as
select std_num, std_name, std_major from student
where std_major = '컴퓨터공학';

3. A학점인 친구들 뷰 생성
create view A_view as
select * from attend
where at_score = 'B';

4. 학번, 이름, 학점

create or replace view A_view as
select std_num, std_name, at_score from student
join attend on std_num = at_std_num 
where at_score = 'B';


-----------------------------------------------------

트리거 (trigger) : 연쇄반응 (작용)

- 트리거 : 이벤트에 반응하여 자동으로 실행되는 구문
- 이벤트가 발생했을 때 데이터의 무결성 (일관성)을 지켜야 할 때 사용
- 트리거도 한 번 생성하면 중복생성 X 수정 X 삭제하고 재생성
- 이벤트 update / insert / delete
- 구문의 끝 -> ; 
- 끝 구문의 처리기호 변경
-delimiter : SQL구문의 끝을 다른 기호로 표시할 때 사용

트리거 구문

- drop trigger if exists 트리거명;
- delimiter // (끝기호 변경시 꼭 띄어쓰기 필수)
- create trigger triggr_name after | before 이벤트 on [테이블명]
- for each row 
- begin
- [실행구문 작성;]
- end //
- delimiter ; -> 끝기호 원상복구


변수 사용 가능

- declare : 변수선언
- set : 변수에 값 할당

- new : 이벤트가 발생한 행의 새로운 데이터
- old : 이벤트가 발생한 행의 이전 데이터
- insert : 추가 -> new 데이터 발생
- delete : 삭제 -> old 데이터 발생
- update : 수정 -> 수정 전의 데이터 old / 수정 후의 데이터 new



trigger 예제 shop DB 사용

전체 product 테이블 값을
amount = 50 / sale_amount  = 0
update product set amount = 50, sale_amount =0;


1. 홍길동이 에어나시 3개를 구매 / 에어나시의 재고량 -3, 판매량이 +3이 되게 트리거 작성

drop trigger if exists insert_buy;
delimiter //
create trigger insert_buy after insert on buy
for each row
begin

declare _amount int default 0;
set _amount = new.amount;

update product set 
amount = amount - _amount,
sale_amount = sale_amount + _amount
where name = new.product_name;

end //
delimiter ;



show triggers


2. buy 테이블에 값이 생성 (insert)되면 product 테이블에 amount(재고량), sale_amount(판매량)이 변동되는 트리거 생성

insert into buy(customer, product_name, price, amount) values('홍길동','에어 나시',9000,3);
insert into buy(customer, product_name, price, amount) values('박순이','피트니스상의',9000,3);

insert into buy(customer, product_name, price, amount) values('박순이','피트니스상의',9000,3);
------------------------------------------------------------------------
)
buy 테이블에 데이터를 삭제하면 amount, sale_amount 변경 트리거 생성


drop trigger if exists de_buy;
delimiter // 
create trigger de_buy after delete on buy
for each row
begin

declare _amount int default 0;
set _amount = old.amount;

update product set
amount = amount + old.amount,
sale_amount = sale_amount - old.amount
where name = old.product_name;

end//
delimiter ;

delete from buy where num = 18;


---------------------------------------------------
school 데이터베이스에서 처리

1. course 테이블에 해당 course의 수강인원을 집계하는 필드 생성
  co_degree : 필드 이름

alter table course add co_degree int;


2, co_degree 필드에 해당 코스를 듣고 있는 학생을 집계하여 업데이트

update course set co_degree =
(select count(at_co_code) from attend
where co_code = at_co_code);

+------------+----------------+--------------+----------+---------+----------------------+-----------+
| co_code    | co_name        | co_professor | co_point | co_time | co_timetable         | co_degree |
+------------+----------------+--------------+----------+---------+----------------------+-----------+
| 2020ipc001 | 컴퓨터개론     | 유관순       |        2 |       2 | 화1A,1B,2A,2B        |         2 |
| 2020ipc002 | 기초전기       | 이순신       |        3 |       4 | 월1A,1B,2A목1A,1B,2A |         2 |
| 2020msc001 | 대학수학기초   | 홍길동       |        3 |       3 | 월1A,1B,2A수1A,1B,2A |         6 |
| 2020msc002 | 프로그래밍일반 | 임꺽정       |        3 |       3 | 월1A,1B,2A목1A,1B,2A |         6 |
+------------+----------------+--------------+----------+---------+----------------------+-----------+

3. attend에 수강신청을 하면 course의 co_degree가 자동으로 증가하는 트리거 생성

drop trigger if exists degree;
delimiter //
create trigger degree after insert on attend
for each row
begin
update course set
co_degree = co_degree + 1
where co_code = new.at_co_code;
end//
delimiter ;


insert into attend (at_std_num, at_co_code) values ('2020160001','2020msc001');


mysql> select * from course;
+------------+----------------+--------------+----------+---------+----------------------+-----------+
| co_code    | co_name        | co_professor | co_point | co_time | co_timetable         | co_degree |
+------------+----------------+--------------+----------+---------+----------------------+-----------+
| 2020ipc001 | 컴퓨터개론     | 유관순       |        2 |       2 | 화1A,1B,2A,2B        |         2 |
| 2020ipc002 | 기초전기       | 이순신       |        3 |       4 | 월1A,1B,2A목1A,1B,2A |         2 |
| 2020msc001 | 대학수학기초   | 홍길동       |        3 |       3 | 월1A,1B,2A수1A,1B,2A |         7 |
| 2020msc002 | 프로그래밍일반 | 임꺽정       |        3 |       3 | 월1A,1B,2A목1A,1B,2A |         6 |
+------------+----------------+--------------+----------+---------+----------------------+-----------+


----------------------------------------------------------------------------------------------------------

update 트리거 생성
- update : 수정 -> 수정 전의 데이터 old / 수정 후의 데이터 new
attend 테이블에 값이 변경되면 co_degree의 값도 같이 변경되도록 트리거 작성

drop trigger if exists update_attend;
delimiter //
create trigger update_attend after update on attend
for each row
begin 
update course set co_degree = co_degree -1
where co_code = old.at_co_code;
update course set co_degree = co_degree +1
where co_code = new.at_co_code;



drop trigger if exists update_attend;
delimiter //
create trigger update_attend after update on attend
for each row
begin 
update course set co_degree= (
case
when co_code = new.at_co_code then co_degree +1
when co_code = old.at_co_code then co_degree -1
else co_degree 
end);
end//
delimiter ;

update attend set at_co_code = '2020msc002' where at_num = 17;




























